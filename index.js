/* eslint-disable no-magic-numbers, sort-keys */
module.exports = {
	extends: [
		"eslint:recommended",
		"plugin:node/recommended"
	],
	parserOptions: {
		ecmaVersion: 11,
		sourceType: "script",
		ecmaFeatures: {impliedStrict: true}
	},
	env: {
		browser: true,
		node: true,
		// mocha: true
		es2020: true
	},
	rules: {
		// node errors
		"node/no-sync": ["error", {allowAtRootLevel: true}],

		// Errors - most of these are eslint:recommended
		"array-callback-return": "error",
		"constructor-super": "error",
		"for-direction": "error",
		"getter-return": "error",
		"no-async-promise-executor": "error",
		"no-await-in-loop": "warn", // There are valid cases for this, but it's best to warn
		"no-class-assign": "error",
		"no-compare-neg-zero": "error",
		"no-cond-assign": "error",
		"no-const-assign": "error",
		"no-constant-condition": ["error", {checkLoops: false}],
		"no-constructor-return": "error",
		"no-control-regex": "warn",
		"no-debugger": "warn",
		"no-dupe-args": "error",
		"no-dupe-class-members": "error",
		"no-dupe-else-if": "error",
		"no-dupe-keys": "error",
		"no-duplicate-case": "error",
		"no-duplicate-imports": ["error", {includeExports: true}],
		"no-empty-character-class": "error",
		"no-empty-pattern": "error",
		"no-ex-assign": "error",
		"no-fallthrough": ["error", {commentPattern: "[Ff]alls?\\s*through"}],
		"no-func-assign": "error",
		"no-import-assign": "error",
		"no-inner-declarations": "error",
		// Maybe I should block these entirely, so that escape code must be used for strange whitespace
		"no-irregular-whitespace": ["error", {skipStrings: true}],
		"no-loss-of-precision": "error",
		"no-misleading-character-class": "error",
		"no-new-symbol": "error",
		"no-obj-calls": "error",
		"no-promise-executor-return": "error",
		"no-prototype-builtins": "warn",
		"no-self-assign": "warn",
		"no-self-compare": "error",
		"no-setter-return": "warn",
		"no-sparse-arrays": "error",
		"no-template-curly-in-string": "warn",
		"no-this-before-super": "error",
		"no-undef": "error",
		"no-unexpected-multiline": "error",
		"no-unmodified-loop-condition": "error",
		"no-unreachable": "warn",
		"no-unreachable-loop": "warn",
		"no-unsafe-finally": "warn",
		"no-unsafe-negation": "error",
		"no-unsafe-optional-chaining": "error",
		"no-unused-private-class-members": "error",
		"no-unused-vars": "error",
		"no-use-before-define": "error",
		"no-useless-backreference": "error",
		"require-atomic-updates": "error",
		"use-isnan": "error",
		// "Suggestions" mostly formatting stuff
		"accessor-pairs": "error",
		"arrow-body-style": ["error", "as-needed"],
		"block-scoped-var": "error",
		camelcase: ["error", {properties: "never", ignoreDestructuring: true, ignoreGlobals: true}],
		"class-methods-use-this": "error",
		complexity: ["warn", 15], // TODO: test this out
		"consistent-return": "warn",
		"consistent-this": ["error", "that"], // This is probably obsolete now that we have magical arrow funcs
		curly: ["error", "all"],
		"default-case": "error",
		"dot-notation": ["error", {allowKeywords: false}],
		"func-name-matching": ["error", "always"],
		"func-names": ["error", "never"], // TODO: "as-needed" instead of "never"?
		"func-style": ["error", "expression"],
		"grouped-accessor-pairs": "error",
		"max-depth": ["warn", 6],
		// Prety forgiving, but 800 is starting to get a bit excessive
		"max-lines": ["warn", {max: 800, skipBlankLines: true, skipComments: true}],
		"max-nested-callbacks": ["warn", 4],
		"max-params": ["warn", 5],
		"multiline-comment-style": ["warn", "bare-block"],
		"new-cap": ["error", {newIsCap: true, capIsNew: false, properties: false}],
		"no-alert": "warn",
		"no-array-constructor": "error",
		"no-case-declarations": "error",
		"no-confusing-arrow": "error",
		"no-delete-var": "error",
		"no-div-regex": "error",
		"no-else-return": "error",
		"no-empty": "error",
		"no-empty-function": "error",
		"no-eval": "error",
		"no-extend-native": "error",
		"no-extra-bind": "error",
		"no-extra-boolean-cast": "error",
		"no-extra-label": "error",
		"no-extra-semi": "error",
		"no-floating-decimal": "error",
		"no-global-assign": "error",
		"no-implicit-globals": "error",
		"no-implied-eval": "error",
		"no-invalid-this": ["error", {capIsConstructor: false}],
		"no-iterator": "error",
		"no-label-var": "error",
		"no-lone-blocks": "error",
		"no-lonely-if": "error",
		"no-loop-func": "error",
		"no-magic-numbers": ["warn", {ignoreArrayIndexes: true, ignore: [1, 0]}],
		"no-mixed-operators": [
			"warn",
			{allowSamePrecedence: true}
		],
		"no-multi-str": "error",
		"no-negated-condition": "error",
		"no-new": "error",
		"no-new-func": "error",
		"no-new-object": "error",
		"no-new-wrappers": "error",
		"no-nonoctal-decimal-escape": "error",
		"no-octal": "error",
		"no-octal-escape": "error",
		"no-proto": "error",
		"no-redeclare": "error",
		"no-regex-spaces": "warn",
		"no-return-await": "error",
		"no-script-url": "error",
		"no-shadow": "warn",
		"no-shadow-restricted-names": "error",
		"no-throw-literal": "error",
		"no-undef-init": "error",
		"no-unneeded-ternary": "error",
		"no-unused-expressions": "error",
		"no-unused-labels": "error",
		"no-useless-call": "error",
		"no-useless-catch": "error",
		"no-useless-computed-key": "error",
		"no-useless-concat": "error",
		"no-useless-constructor": "error",
		"no-useless-escape": "error",
		"no-useless-rename": "error",
		"no-useless-return": "error",
		"no-var": "error",
		"no-warning-comments": "warn",
		"no-with": "error",
		"object-shorthand": ["error", "always"],
		"operator-assignment": ["error", "always"],
		"prefer-arrow-callback": ["warn"], // Mocha should be exempted
		"prefer-const": "error",
		"prefer-destructuring": "error",
		"prefer-exponentiation-operator": "error",
		"prefer-numeric-literals": "error",
		"prefer-object-spread": "error",
		"prefer-promise-reject-errors": "error",
		"prefer-regex-literals": "error",
		"prefer-rest-params": "error",
		"prefer-spread": "error",
		"prefer-template": "warn",
		"quote-props": ["error", "as-needed"],
		radix: ["error", "as-needed"],
		"require-await": "error",
		"sort-imports": "warn",
		"sort-keys": ["warn", "asc", {caseSensitive: true, natural: true}],
		"sort-vars": "warn",
		"spaced-comment": ["error", "always"],
		"symbol-description": "error",
		yoda: ["error", "never", {exceptRange: true}],

		// "Layout & Formatting"
		"array-bracket-newline": ["error", {multiline: true}],
		"array-bracket-spacing": ["error", "never"],
		"array-element-newline": ["error", "consistent"],
		"arrow-parens": ["error", "as-needed"],
		"arrow-spacing": "error",
		"block-spacing": ["error", "never"],
		"brace-style": ["error", "1tbs", {allowSingleLine: true}],
		"comma-dangle": ["error", "never"],
		"comma-spacing": ["error", {before: false, after: true}],
		"comma-style": ["error", "last"],
		"computed-property-spacing": ["error", "never"],
		"dot-location": ["error", "property"],
		"eol-last": ["error", "always"],
		"func-call-spacing": ["error", "never"],
		"function-call-argument-newline": ["error", "consistent"],
		"function-paren-newline": ["error", "consistent"],
		"generator-star-spacing": ["error", {before: false, after: true}],
		"implicit-arrow-linebreak": ["error", "beside"],
		indent: [
			"error",
			"tab",
			{
				SwitchCase: 1,
				VariableDeclarator: 1,
				outerIIFEBody: 0,
				MemberExpression: 1,
				FunctionDeclaration: {
					body: 1,
					parameters: 1
				},
				FunctionExpression: {
					body: 1,
					parameters: 1
				},
				CallExpression: {arguments: 1},
				ArrayExpression: 1,
				ObjectExpression: 1,
				ImportDeclaration: 1,
				flatTernaryExpressions: true
			}
		],
		"jsx-quotes": ["error", "prefer-double"],
		"key-spacing": ["error", {beforeColon: false, afterColon: true, mode: "strict"}],
		"keyword-spacing": [
			"error",
			{
				before: false,
				after: false,
				overrides: {
					this: {before: true},
					return: {after: true},
					case: {after: true},
					const: {after: true},
					let: {after: true},
					throw: {after: true}
				}
			}
		],
		"linebreak-style": ["error", "unix"],
		"lines-around-comment": "off",
		"lines-between-class-members": ["error", "never"],
		"max-len": [
			"error",
			{
				tabWidth: 4,
				code: 120,
				ignoreRegExpLiterals: true
				// With a template literal, one could simply ${\n}
			}
		],
		"multiline-ternary": ["error", "always-multiline"],
		"new-parens": "error",
		"newline-per-chained-call": ["error", {ignoreChainWithDepth: 2}],
		"no-mixed-spaces-and-tabs": ["error", "smart-tabs"],
		"no-multi-spaces": "error",
		"no-multiple-empty-lines": "error",
		"no-trailing-spaces": "error",
		"no-whitespace-before-property": "error",
		"nonblock-statement-body-position": ["error", "beside"],
		"object-curly-newline": ["error", {multiline: true}],
		"object-curly-spacing": ["error", "never"],
		"object-property-newline": ["error", {allowAllPropertiesOnSameLine: true}],
		"operator-linebreak": ["error", "after"],
		"padded-blocks": ["error", "never"],
		quotes: ["error", "double", {allowTemplateLiterals: true}],
		semi: ["error", "always"],
		"semi-spacing": "error",
		"semi-style": ["error", "last"],
		"space-before-blocks": [
			"error", {
				functions: "never",
				keywords: "never",
				classes: "always"
			}
		],
		"space-before-function-paren": ["error", "never"],
		"space-in-parens": ["error", "never"],
		"space-infix-ops": ["error"],
		"space-unary-ops": "error",
		"switch-colon-spacing": ["error", {after: true, before: false}],
		"template-curly-spacing": "error",
		"template-tag-spacing": ["error", "always"],
		"unicode-bom": ["error", "never"],
		"wrap-iife": ["error", "inside"],
		"yield-star-spacing": ["error", "after"]
	}
};
